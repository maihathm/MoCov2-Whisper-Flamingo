import os
from multiprocessing import Pool
import torchvision.io as tvio

DATA_ROOT = "/root/maihathm/AVASR/data/avsr_self"  # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c g·ªëc data
NUM_PROCESSES = 72  # S·ªë l∆∞·ª£ng CPU mu·ªën t·∫≠n d·ª•ng

def get_num_frames(video_path: str) -> int:
    """
    H√†m ƒë·ªçc video v√† tr·∫£ v·ªÅ s·ªë khung h√¨nh (frames).
    """
    try:
        # ƒë·ªçc video v·ªõi output_format="THWC" => [T, H, W, C]
        video, _, _ = tvio.read_video(
            video_path, 
            pts_unit="sec",
            output_format="THWC"
        )
        return video.shape[0]  # T = s·ªë khung h√¨nh
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file {video_path}: {e}")
        return 0

def collect_video_paths(data_root: str):
    """
    H√†m gom t·∫•t c·∫£ ƒë∆∞·ªùng d·∫´n .mp4 trong c√°c th∆∞ m·ª•c train/val/test.
    """
    all_video_paths = []
    for split in ["train", "val", "test"]:
        video_dir = os.path.join(data_root, split, f"{split}_video_seg12s")
        if not os.path.isdir(video_dir):
            # N·∫øu kh√¥ng t·ªìn t·∫°i, b·ªè qua
            continue

        # Duy·ªát ƒë·ªá quy m·ªçi file .mp4
        for root, dirs, files in os.walk(video_dir):
            for fname in files:
                if fname.endswith(".mp4"):
                    fpath = os.path.join(root, fname)
                    all_video_paths.append(fpath)

    return all_video_paths

def main():
    # Thu th·∫≠p t·∫•t c·∫£ c√°c ƒë∆∞·ªùng d·∫´n .mp4
    video_paths = collect_video_paths(DATA_ROOT)
    print(f"üü¢ T·ªïng s·ªë video c·∫ßn duy·ªát: {len(video_paths)}")

    # D√πng multiprocessing Pool ƒë·ªÉ ƒë·ªçc frame count
    with Pool(processes=NUM_PROCESSES) as pool:
        frame_counts = pool.map(get_num_frames, video_paths)

    max_frame_count = max(frame_counts) if frame_counts else 0
    print(f"‚úÖ S·ªë frame d√†i nh·∫•t trong to√†n b·ªô dataset: {max_frame_count}")

if __name__ == "__main__":
    main()
